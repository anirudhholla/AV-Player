package com.java.player;


import java.io.*;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.*;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineListener;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.sound.sampled.LineUnavailableException;

public class PlaySound implements LineListener {
	private static final int SECONDS_IN_HOUR = 60 * 60, SECONDS_IN_MINUTE = 60;
	private boolean playCompleted, isPaused, isReplicated = true, isStopped;
	private AudioFormat format = null;
	private Clip audioClip;
	
	public String getClipLengthString() {
		String length = "";
		long hour = 0, minute = 0, seconds = audioClip.getMicrosecondLength() / 1000000;

		if (seconds < SECONDS_IN_HOUR) {
			length += "00:";
		} else {
			hour = seconds / SECONDS_IN_HOUR;
			length = String.format("%02d:", hour);
		}

		minute = seconds - hour * SECONDS_IN_HOUR;
		if (minute < SECONDS_IN_MINUTE) {
			minute = 0;
			length += "00:";
		} else {
			minute = minute / SECONDS_IN_MINUTE;
			length += String.format("%02d:", minute);
		}

		long second = seconds - hour * SECONDS_IN_HOUR - minute * SECONDS_IN_MINUTE;

		length += String.format("%02d", second);

		return length;
	}
	
	public void load(String audioFilePath) throws LineUnavailableException,
												  UnsupportedAudioFileException,
	                                              IOException  {

		format = null;
		audioClip = null;
		File new_file = new File(audioFilePath);
		
		AudioInputStream audioStream = AudioSystem.getAudioInputStream(new_file);
		format = audioStream.getFormat();

		DataLine.Info info = new DataLine.Info(Clip.class, format);

		audioClip = (Clip) AudioSystem.getLine(info);
		audioClip.addLineListener(this);
		audioClip.open(audioStream);
	}

	public long getClipSecondLength() {
		return audioClip.getMicrosecondLength() / 1000000;
	}
	
	void play() throws IOException {
		audioClip.start();
		playCompleted = false;
		isStopped = false;

		while (!playCompleted) {
			try {
				Thread.sleep(1000);
			} 
			
			catch (ArithmeticException ex) {
				System.out.println("Sleep stopped unexpectedly");
			}
			
			catch (InterruptedException ex) {
				if (isStopped) {
					audioClip.stop();
					break;
				}
				
				else if (isPaused) {
					audioClip.stop();
				}
				
				else {
					audioClip.start();
				}
			}
		}

		audioClip.close();

	}

	public void stop() {
		isStopped = true;
	}
	
	public Clip getAudioClip() {
		return audioClip;
	}
	
	public void pause() {
		isPaused = true;
	}
	
	public void resume() {
		isPaused = false;
	}
	
	public float getSampleRate() {
		return format.getFrameRate();
	}
	
	public void replicate() {
		isReplicated = true;
	}
	
	public long getPosition() {
		return audioClip.getLongFramePosition();
	}

	public void update(LineEvent event) {
		LineEvent.Type type = event.getType();
		
		if (type != LineEvent.Type.STOP) {
			isReplicated = false;
		}
		else {
			if (isStopped) {
				if (!isPaused) {
					playCompleted = true;
				}
			}
		}
	}
}